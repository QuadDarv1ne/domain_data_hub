-- *******************************************************
-- СКРИПТ СОЗДАНИЯ БАЗЫ ДАННЫХ ДЛЯ СУПЕРМАРКЕТА (ФРАНШИЗЫ) ДЛЯ MYSQL
-- *******************************************************
CREATE DATABASE IF NOT EXISTS supermarket;
USE supermarket;

-- *******************************************************
-- Таблица для хранения информации о магазинах
-- *******************************************************
CREATE TABLE IF NOT EXISTS Stores (
    store_id INT AUTO_INCREMENT PRIMARY KEY,  -- Уникальный идентификатор магазина
    name VARCHAR(255) NOT NULL,  -- Название магазина, обязательное
    address VARCHAR(255),  -- Адрес магазина
    city VARCHAR(255),  -- Город
    region VARCHAR(255),  -- Регион
    phone VARCHAR(15),  -- Телефон
    opening_date DATE,  -- Дата открытия
    UNIQUE(name),  -- Уникальность названия магазина
    CHECK (LENGTH(name) > 0)  -- Название магазина не должно быть пустым
);

-- *******************************************************
-- Таблица для хранения информации о поставщиках
-- *******************************************************
CREATE TABLE IF NOT EXISTS Suppliers (
    supplier_id INT AUTO_INCREMENT PRIMARY KEY,  -- Уникальный идентификатор поставщика
    name VARCHAR(255) NOT NULL,  -- Название поставщика
    contact_person VARCHAR(255),  -- Контактное лицо
    phone VARCHAR(15),  -- Телефон поставщика
    email VARCHAR(255),  -- Электронная почта
    address VARCHAR(255),  -- Адрес
    UNIQUE(name),  -- Уникальность названия поставщика
    CHECK (LENGTH(name) > 0)  -- Название поставщика не должно быть пустым
);

-- *******************************************************
-- Таблица для хранения информации о категориях товаров
-- *******************************************************
CREATE TABLE IF NOT EXISTS Categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,  -- Уникальный идентификатор категории
    name VARCHAR(255) NOT NULL,  -- Название категории товара
    description TEXT,  -- Описание категории
    UNIQUE(name),  -- Уникальность названия категории
    CHECK (LENGTH(name) > 0)  -- Название категории не должно быть пустым
);

-- *******************************************************
-- Таблица для хранения информации о товарах
-- *******************************************************
CREATE TABLE IF NOT EXISTS Products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,  -- Уникальный идентификатор товара
    name VARCHAR(255) NOT NULL,  -- Название товара
    category_id INT NOT NULL,  -- Внешний ключ на категорию товара
    brand VARCHAR(255),  -- Бренд товара
    price DECIMAL(10, 2) NOT NULL,  -- Цена товара
    stock_quantity INT NOT NULL DEFAULT 0,  -- Количество товара
    supplier_id INT NOT NULL,  -- Внешний ключ на поставщика
    FOREIGN KEY (category_id) REFERENCES Categories (category_id) ON DELETE CASCADE,  -- Связь с таблицей категорий
    FOREIGN KEY (supplier_id) REFERENCES Suppliers (supplier_id) ON DELETE CASCADE,  -- Связь с таблицей поставщиков
    CHECK (LENGTH(name) > 0),  -- Название товара не должно быть пустым
    CHECK (price > 0)  -- Цена товара должна быть больше 0
);

-- *******************************************************
-- Таблица для хранения информации о сотрудниках
-- *******************************************************
CREATE TABLE IF NOT EXISTS Employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,  -- Уникальный идентификатор сотрудника
    first_name VARCHAR(255) NOT NULL,  -- Имя сотрудника
    last_name VARCHAR(255) NOT NULL,  -- Фамилия сотрудника
    position VARCHAR(255) NOT NULL,  -- Должность сотрудника
    store_id INT NOT NULL,  -- Внешний ключ на магазин
    hire_date DATE NOT NULL,  -- Дата приема на работу
    salary DECIMAL(10, 2) NOT NULL,  -- Зарплата сотрудника
    FOREIGN KEY (store_id) REFERENCES Stores (store_id) ON DELETE CASCADE,  -- Связь с таблицей магазинов
    CHECK (LENGTH(first_name) > 0 AND LENGTH(last_name) > 0),  -- Имя и фамилия сотрудника не могут быть пустыми
    CHECK (salary > 0)  -- Зарплата сотрудника должна быть больше 0
);

-- *******************************************************
-- Таблица для хранения информации о продажах
-- *******************************************************
CREATE TABLE IF NOT EXISTS Sales (
    sale_id INT AUTO_INCREMENT PRIMARY KEY,  -- Уникальный идентификатор продажи
    store_id INT NOT NULL,  -- Внешний ключ на магазин
    employee_id INT NOT NULL,  -- Внешний ключ на сотрудника
    product_id INT NOT NULL,  -- Внешний ключ на товар
    quantity INT NOT NULL,  -- Количество проданных товаров
    total_price DECIMAL(10, 2) NOT NULL,  -- Общая стоимость продажи
    sale_date DATETIME DEFAULT CURRENT_TIMESTAMP,  -- Дата и время продажи
    FOREIGN KEY (store_id) REFERENCES Stores (store_id) ON DELETE CASCADE,  -- Связь с таблицей магазинов
    FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) ON DELETE CASCADE,  -- Связь с таблицей сотрудников
    FOREIGN KEY (product_id) REFERENCES Products (product_id) ON DELETE CASCADE,  -- Связь с таблицей товаров
    CHECK (quantity > 0),  -- Количество товаров в продаже должно быть больше 0
    CHECK (total_price > 0)  -- Общая стоимость продажи должна быть больше 0
);

-- *******************************************************
-- Таблица для хранения информации о товарах на складе
-- *******************************************************
CREATE TABLE IF NOT EXISTS Inventory (
    inventory_id INT AUTO_INCREMENT PRIMARY KEY,  -- Уникальный идентификатор записи о товаре на складе
    store_id INT NOT NULL,  -- Внешний ключ на магазин
    product_id INT NOT NULL,  -- Внешний ключ на товар
    stock_quantity INT NOT NULL DEFAULT 0,  -- Количество товара на складе
    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,  -- Дата последнего обновления записи
    FOREIGN KEY (store_id) REFERENCES Stores (store_id) ON DELETE CASCADE,  -- Связь с таблицей магазинов
    FOREIGN KEY (product_id) REFERENCES Products (product_id) ON DELETE CASCADE  -- Связь с таблицей товаров
);

-- *******************************************************
-- Создание индексов для улучшения производительности запросов
-- *******************************************************

-- Индекс для поиска по названию товара
CREATE INDEX idx_products_name ON Products (name);

-- Индекс для поиска по дате продажи
CREATE INDEX idx_sales_sale_date ON Sales (sale_date);

-- Индекс для поиска по дате последнего обновления в таблице Inventory
CREATE INDEX idx_inventory_last_updated ON Inventory (last_updated);

-- Индекс для быстрого поиска по магазину и товару на складе
CREATE INDEX idx_inventory_store_product ON Inventory (store_id, product_id);

-- Индекс для быстрого поиска по магазину и сотруднику в таблице Sales
CREATE INDEX idx_sales_store_employee ON Sales (store_id, employee_id);

-- Проверка и создание индекса для поиска по названию товара
SELECT COUNT(*) 
FROM information_schema.statistics 
WHERE table_name = 'Products' AND index_name = 'idx_products_name';

-- Если индекс не существует (результат = 0), создаем его
CREATE INDEX idx_products_name ON Products (name);

-- Проверка и создание индекса для поиска по дате продажи
SELECT COUNT(*) 
FROM information_schema.statistics 
WHERE table_name = 'Sales' AND index_name = 'idx_sales_sale_date';

-- Если индекс не существует (результат = 0), создаем его
CREATE INDEX idx_sales_sale_date ON Sales (sale_date);

-- Проверка и создание индекса для поиска по дате последнего обновления в Inventory
SELECT COUNT(*) 
FROM information_schema.statistics 
WHERE table_name = 'Inventory' AND index_name = 'idx_inventory_last_updated';

-- Если индекс не существует (результат = 0), создаем его
CREATE INDEX idx_inventory_last_updated ON Inventory (last_updated);

-- Проверка и создание индекса для поиска по магазину и товару на складе
SELECT COUNT(*) 
FROM information_schema.statistics 
WHERE table_name = 'Inventory' AND index_name = 'idx_inventory_store_product';

-- Если индекс не существует (результат = 0), создаем его
CREATE INDEX idx_inventory_store_product ON Inventory (store_id, product_id);

-- Проверка и создание индекса для поиска по магазину и сотруднику в Sales
SELECT COUNT(*) 
FROM information_schema.statistics 
WHERE table_name = 'Sales' AND index_name = 'idx_sales_store_employee';

-- Если индекс не существует (результат = 0), создаем его
CREATE INDEX idx_sales_store_employee ON Sales (store_id, employee_id);

-- *******************************************************
-- Пример добавления данных
-- *******************************************************
-- *******************************************************
-- Добавление данных в таблицу Stores
-- *******************************************************
INSERT INTO Stores (name, address, city, region, phone, opening_date) 
VALUES 
('Магазин №1', 'ул. Ленина, 5', 'Москва', 'Центр', '1234567890', '2024-01-01'),
('Магазин №2', 'ул. Пушкина, 15', 'Санкт-Петербург', 'Невский', '1234567891', '2024-02-01'),
('Магазин №3', 'ул. Гагарина, 10', 'Екатеринбург', 'Урал', '1234567892', '2024-03-01'),
('Магазин №4', 'ул. Лермонтова, 20', 'Новосибирск', 'Сибирь', '1234567893', '2024-04-01'),
('Магазин №5', 'ул. Чкалова, 25', 'Казань', 'Волга', '1234567894', '2024-05-01'),
('Магазин №6', 'ул. Тимирязева, 30', 'Воронеж', 'Черноземье', '1234567895', '2024-06-01'),
('Магазин №7', 'ул. Маяковского, 35', 'Красноярск', 'Сибирь', '1234567896', '2024-07-01'),
('Магазин №8', 'ул. Свердлова, 40', 'Челябинск', 'Урал', '1234567897', '2024-08-01'),
('Магазин №9', 'ул. Римского-Корсакова, 45', 'Самара', 'Поволжье', '1234567898', '2024-09-01'),
('Магазин №10', 'ул. Советская, 50', 'Волгоград', 'Юг', '1234567899', '2024-10-01');

-- *******************************************************
-- Добавление данных в таблицу Suppliers
-- *******************************************************
INSERT INTO Suppliers (name, contact_person, phone, email, address) 
VALUES 
('Молочная компания', 'Иван Иванов', '123456789', 'contact@milk.com', 'Москва, ул. Примерная, 1'),
('Хлебокомбинат', 'Мария Смирнова', '123456780', 'contact@bread.com', 'Санкт-Петербург, ул. Пекарская, 5'),
('Овощи и фрукты', 'Петр Петров', '123456781', 'contact@vegetables.com', 'Екатеринбург, ул. Огородная, 7'),
('Консервация', 'Анна Иванова', '123456782', 'contact@canned.com', 'Новосибирск, ул. Консервная, 10'),
('Мясо и рыба', 'Дмитрий Николаев', '123456783', 'contact@meatfish.com', 'Казань, ул. Продукты, 15'),
('Напитки', 'Юлия Белова', '123456784', 'contact@drinks.com', 'Воронеж, ул. Напитковая, 20'),
('Кондитерские изделия', 'Алексей Орлов', '123456785', 'contact@sweets.com', 'Красноярск, ул. Сладкая, 25'),
('Продукты питания', 'Елена Сергеева', '123456786', 'contact@food.com', 'Челябинск, ул. Продукция, 30'),
('Товары для дома', 'Светлана Романова', '123456787', 'contact@homegoods.com', 'Самара, ул. Домашняя, 35'),
('Товары для детей', 'Наталья Кузнецова', '123456788', 'contact@toys.com', 'Волгоград, ул. Детская, 40');

-- *******************************************************
-- Добавление данных в таблицу Categories
-- *******************************************************
INSERT INTO Categories (name, description) 
VALUES 
('Молочные продукты', 'Продукты из молока'),
('Хлебобулочные изделия', 'Продукты, полученные из муки и воды'),
('Овощи', 'Продукты растительного происхождения'),
('Фрукты', 'Продукты растительного происхождения'),
('Мясо', 'Продукты животного происхождения'),
('Рыба', 'Продукты животного происхождения'),
('Кондитерские изделия', 'Продукты, содержащие сахар, муку и другие добавки'),
('Напитки', 'Продукты, используемые для утоления жажды'),
('Консервация', 'Продукты, обработанные для хранения в банках или контейнерах'),
('Товары для детей', 'Продукты и товары, предназначенные для детей');

-- *******************************************************
-- Добавление данных в таблицу Products
-- *******************************************************
INSERT INTO Products (name, category_id, brand, price, stock_quantity, supplier_id) 
VALUES 
('Молоко', 1, 'Молочная компания', 50.00, 100, 1),
('Хлеб', 2, 'Хлебокомбинат', 30.00, 200, 2),
('Картофель', 3, 'Овощи и фрукты', 25.00, 150, 3),
('Яблоки', 4, 'Овощи и фрукты', 80.00, 120, 3),
('Говядина', 5, 'Мясо и рыба', 200.00, 50, 4),
('Лосось', 6, 'Мясо и рыба', 500.00, 40, 5),
('Торт', 7, 'Кондитерские изделия', 150.00, 80, 6),
('Кока-кола', 8, 'Напитки', 60.00, 100, 7),
('Огурцы', 3, 'Овощи и фрукты', 40.00, 180, 3),
('Пюре', 9, 'Консервация', 45.00, 90, 4);

-- *******************************************************
-- Добавление данных в таблицу Employees
-- *******************************************************
INSERT INTO Employees (first_name, last_name, position, store_id, hire_date, salary) 
VALUES 
('Петр', 'Петров', 'Продавец', 1, '2024-01-01', 30000),
('Мария', 'Смирнова', 'Кассир', 2, '2024-02-01', 25000),
('Иван', 'Иванов', 'Менеджер', 3, '2024-03-01', 35000),
('Ольга', 'Федорова', 'Продавец', 4, '2024-04-01', 28000),
('Сергей', 'Кузнецов', 'Кассир', 5, '2024-05-01', 27000),
('Анна', 'Дмитриева', 'Менеджер', 6, '2024-06-01', 32000),
('Дмитрий', 'Николаев', 'Продавец', 7, '2024-07-01', 30000),
('Татьяна', 'Попова', 'Кассир', 8, '2024-08-01', 25000),
('Юлия', 'Белова', 'Менеджер', 9, '2024-09-01', 33000),
('Алексей', 'Орлов', 'Продавец', 10, '2024-10-01', 31000);

-- *******************************************************
-- Добавление данных в таблицу Sales
-- *******************************************************
INSERT INTO Sales (store_id, employee_id, product_id, quantity, total_price) 
VALUES 
(1, 1, 1, 2, 100.00),
(2, 2, 2, 5, 150.00),
(3, 3, 3, 3, 75.00),
(4, 4, 4, 1, 80.00),
(5, 5, 5, 4, 800.00),
(6, 6, 6, 2, 1000.00),
(7, 7, 7, 3, 450.00),
(8, 8, 8, 6, 360.00),
(9, 9, 9, 2, 90.00),
(10, 10, 10, 1, 45.00);

-- *******************************************************
-- Добавление данных в таблицу Inventory
-- *******************************************************
INSERT INTO Inventory (store_id, product_id, stock_quantity) 
VALUES 
(1, 1, 98),
(2, 2, 195),
(3, 3, 147),
(4, 4, 119),
(5, 5, 46),
(6, 6, 38),
(7, 7, 77),
(8, 8, 94),
(9, 9, 88),
(10, 10, 89);
